#!/usr/bin/env ruby

# Version
VERSION = '0.1.3 (30-10-12)'

# If no regex is given,. check the field exists
DEFAULT_RX = "\.+"

# These are not technically internal keys, but metadata which
# should still be searchable.  The is a limitation of the library.
PSEUDO_KEYS = %w{key type}

OPTIONS = {
            :f => {:desc => "Output filename (default if multiple files used)"},
            :F => {:desc => "Suppress filename output with multiple files."},
            :p => {:desc => "Suppress placeholders for empty fields"},
            
            # Raw output
            :r => {:desc => "Output BibTeX (Cannot be used with -o)"},
            :o => {:desc => "Specify output fields (o[=]field[,field[,field]])"},

            # Regex options
            :v => {:desc => "Invert match"},
            :i => {:desc => "Case-insensitive regex"},
            :e => {:desc => "Extended regex"},
            :m => {:desc => "Multi-line regex"},

            # BibTeX options
            :c => {:desc => "Process comment types"},
            :w => {:desc => "Suppress BibTeX validity warnings"},

            # Misc.
            # :q => {:desc => "Suppress file warnings"},
            :V => {:desc => "Verbose (list conditions)"},
            :h => {:desc => "Output help"}
          }


# Default options to use when none are specified
DEFAULT_OPTIONS         = "rw".chars.map{|c| c.to_sym}

# Print usage, version info
def usage
  $stderr.puts "BibGrep v#{VERSION}"
  $stderr.puts ""
  $stderr.puts "USAGE: #{$0} [-FLAGS] [-oFIELD] [-o=FIELD[,FIELD2[,...]]] [+FIELD[=RX] [+FIELD[=RX] [...]]] [FILE [FILE [...]]"
  $stderr.puts ""
  $stderr.puts "Where..."
  $stderr.puts " FIELD : A BibTeX key to match on."
  $stderr.puts "     RX : Regex to match against the field.  Omitting"
  $stderr.puts "          a pattern means we use the default, /#{DEFAULT_RX}/"
  $stderr.puts "   FILE : The BibTeX file(s) to parse. If your filename"
  $stderr.puts "          begins with a dash, prefix the argument with "
  $stderr.puts "          two dashes thus: 'lsbib -- -.bib'"
  
  $stderr.puts "  FIELD : One of BibTeX's field names.  Not case-sensitive."
  $stderr.puts "  FLAGS : A string containing some of the options below."
  $stderr.puts "          Default is -#{DEFAULT_OPTIONS.join('')}."
  OPTIONS.each{|k,v|
  $stderr.puts "          -#{k} : #{v[:desc]}"
  }
  $stderr.puts ""
  $stderr.puts "NB: If no files are given, I will read from stdin."
end

# Parse input options, returning:
#  input files and filenames
#  a hash of conditions to apply to bibtex
#  option flags
def parse_args
  # Create slots for conditions and files
  files       = {} 
  conditions  = {}
  options     = DEFAULT_OPTIONS
  output      = []

  # Parse input arguments
  force_file = false
  default_options = true
  ARGV.each{|a|

    # Test if it's an argument or a file
    if %w{- +}.include?(a[0]) and not force_file then
      
      
      # Check for separator
      if a == '--' then
        # Separator, turn force file mode on
        force_file = true
      elsif a[0] == '+' then
        # condition
        a = a[1..-1]  # Remove prefixed dash
        value = DEFAULT_RX
        key = a
        if equals = a.index('=') then
          key = a[0..(equals-1)]
          value = a[(equals+1)..-1]
        end

        # Assign to list of things to check
        conditions[key] = value
      elsif a[0] == '-' then
        if default_options
          options = [] 
          default_options = false
        end

        # option
        long_arg = false
        (1..(a.length-1)).each{|i|
          if not long_arg then
            # Single-char options
            o = a[i]
          
            if OPTIONS.keys.include?(o.to_sym)

              # Handle output specially
              if o == 'o' then
                options << :o
                # Tell the loop to ignore further things from this group
                long_arg = true
                
                # Ignore leading equals and cut up by space
                fields = a[(i+1)..-1].gsub(/^=/, '').split(',')
                if fields.length > 0 then
                  output += fields
                end

              else
                # Flag option
                options << o.to_sym 
              end
            else
              $stderr.puts "Unrecognised option: #{o}"
              # force help
              options << :h
            end
          end
        }
      end


    else
      # file
      if not File.readable?(a) then
        $stderr.puts "Cannot read #{a}"
      elsif File.directory?(a) then
        $stderr.puts "#{a} is a directory"
      else
        files[a] = File.open(a)
      end
    end
  }

  # Check that either -r or -o=field is given
  if options.include?(:r) and output.length > 0 then
    $stderr.puts "Option -r cannot be used with -o."
    options << :h
  end

  # Default to stdin
  files['<stdin>'] = STDIN if files.length == 0

  # List filename by default if file length over 1
  options << :f if not options.include?(:n) and files.length > 1
  options.delete(:f) if options.include?(:F)

  # Construct regex according to options
  rx_flags = 0
  rx_flags |= Regexp::IGNORECASE  if options.include?(:i)
  rx_flags |= Regexp::EXTENDED    if options.include?(:e)
  rx_flags |= Regexp::MULTILINE   if options.include?(:m)
  conditions.each{ |k, v|
    conditions[k] = Regexp.new(v, rx_flags)
  }

  return files, conditions, options.uniq, output
end

# -----------------------------------------------------------------------------
# Entry point
# -----------------------------------------------------------------------------
# Check the prerequisites match
begin
  gem 'bibtex-ruby'
rescue
  $stderr.puts "Please install the `bibtex-ruby' gem."
  exit(1)
end
require 'bibtex'



# -----------------------------------------------------------------------------
# Load everything from ARGV
files, conditions, options, fields = parse_args




# -----------------------------------------------------------------------------
# If the help flag is set simply output help then exit
if options.include?(:h) then
  usage
  exit(1)
end



# -----------------------------------------------------------------------------
# Summarise, if requested
if options.include?(:V) then
  puts "Input files:"
  files.keys.each{|f|
    puts " #{f}"
  }

  puts "\nFilters:"
  conditions.each{|k, v|
    puts " #{k}: #{v.inspect}"
  }

  puts "\nOutput fields:"
  fields.each{|f|
    puts "  #{f}"
  }

  puts "\nActive Options: "
  options.each{|o|
    puts " #{o}: #{OPTIONS[o][:desc]}"
  }
  puts ""
end




# -----------------------------------------------------------------------------
# Processing loop proper.
files.each{|filename, f|
  # Check validity, but don't let it stop us parsing.
  $stderr.puts "BibTeX file #{filename} is invalid" if not options.include?(:w) and not BibTeX.valid?(f) 

  # Open file, optimistically
  bib = BibTeX.parse(f.read)
  bib.each{|b|
    if options.include?(:c) or b.type.to_s.downcase != 'comment' then
      # Perform matching by unmatching things
      # this does an AND in the arguments list
      match = true
      conditions.each{|key, rx|

        # Check matching on the condition, with the key or pseudo-key (object property)
        if not ((PSEUDO_KEYS.include?(key)) ? b.send(key.to_sym) : b[key]) =~ rx
          # cancel the match
          match = false 
        else
          # Report verbose matching info
          puts "Entry #{b.key} in file #{filename} matches on key #{key}" if options.include?(:V) 
        end
      }

      # Invert match if requested
      match = (not match) if options.include?(:v)

      # output
      if match then

        # define output
        output = []

        # check if we want raw output or not
        if options.include?(:r) then
          output << b.to_s
        else
          # Add the filename if people want
          output << "#{filename}" if options.include?(:f)

          # Then check each option to retain order
          # Fields are not available for comments, so simply output the contents if -c is set:
          if options.include?(:c) and b.type.to_s.downcase == 'comment' then
            output << b.content
          else
            fields.each{|f|
              # Load value and apply placeholder if empty
              val = nil
              begin
                val   = b.send(f.to_sym)
              rescue Exception
              end
              val ||= "<no #{f}>" if not options.include?(:p)

              # Add to the output array
              output << val.to_s
            }
          end
        end

        # and output
        puts output.join(": ") if output.length > 0
      end
    end
  }
}
